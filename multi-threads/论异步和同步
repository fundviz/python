 Mark!
js学习
不喜欢js，但是喜欢jquery，不解释。
自学jquery的时候，看到一英文词（Callback），顿时背部隐隐冒冷汗。迅速google之，发现原来中文翻译成回调。也就是回调函数了。不懂啊，于是在google回调函数，发现网上的中文解释实在是太“深奥”了，我承认自己才疏学浅了。看了几个回调的例子后，貌似有点理解了。下面是我对回调函数的理解，要是理解错了，请指正，不甚感激。
        首先还是从jquery网站上的英文定义入手，身为国人，我真感到悲剧。一个回调的定义被国内的“高手”解释成什么样，就在那绕圈子，貌似只有把你绕进去了，他才算高手。浮云，一切都是浮云。
A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.
这是js里的解释了，其他语言的算我没说。
字面上理解下来就是，回调就是一个函数的调用过程。那么就从理解这个调用过程开始吧。函数a有一个参数，这个参数是个函数b，当函数a执行完以后执行函数b。那么这个过程就叫回调。
其实中文也很好理解：回调，回调，就是回头调用的意思。函数a的事先干完，回头再调用函数b。
举个现实的例子：约会结束后你送你女朋友回家，离别时，你肯定会说：“到家了给我发条信息，我很担心你。”对不，然后你女朋友回家以后还真给你发了条信息。小伙子，你有戏了。
其实这就是一个回调的过程。你留了个函数b（要求女朋友给你发条信息）给你女朋友，然后你女朋友回家，回家的动作是函数a。她必须先回到家以后，函数a的内容执行完了，再执行函数b，然后你就收到一条信息了。
这里必须清楚一点：函数b是你以参数形式传给函数a的，那么函数b就叫回调函数。
 也许有人有疑问了:一定要以参数形式传过去吗，我不可以直接在函数a里面调用函数b吗？确实可以。求解中。
<解惑:如果你直接在函数a里调用的话，那么这个回调函数就被限制死了。但是使用函数做参数就有下面的好处：当你a(b)的时候函数b就成了回调函数，而你还可以a(c)这个时候，函数c就成了回调函数。如果你写成了function a(){...;b();}就失去了变量的灵活性。>
下面用代码来证实我的理解。
 
<html> 
 
<head> 
 
<title>回调函数(callback)</title> 
<script language="javascript" type="text/javascript"> 
function a(callback) 
{    
    alert("我是parent函数a！"); 
    alert("调用回调函数"); 
    callback(); 
} 
function b(){ 
alert("我是回调函数b"); 
 
} 
function c(){ 
alert("我是回调函数c"); 
 
} 
 
function test() 
{ 
    a(b); 
   a(c); 
} 
 
</script> 
</head> 
 
<body> 
<h1>学习js回调函数</h1> 
<button onClick=test()>click me</button> 
<p>应该能看到调用了两个回调函数</p> 
</body> 
 
</html> 
 
 
关于如何给函数b传递参数，这个以后再来写。
[1楼]      zhengxuj删除 回复
2012-09-18 13:17:53
很不错的文章，生动易懂

[2楼]      [匿名]wahaha删除 回复
2012-09-26 00:15:32
A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.

这句话经典！

[3楼]      mofamoxiu删除 回复
2013-05-06 20:34:10
看了有收获~~

[4楼]      枫行天下删除 回复
2013-07-16 09:19:52
有收获。。。

[5楼]      枫行天下删除 回复
2013-07-16 09:20:15
有收获！！！

[6楼]      ghg2008删除 回复
2014-07-28 09:42:08
简洁，精辟！

[7楼]      guan8080删除 回复
2015-02-07 13:57:56
个人觉得没有讲明白回调函数的作用！
其实楼主的这个关于女朋友的例子确实很通俗易懂。
如果以“女朋友回家后给你打个电话”作为一个函数（即回调函数），那么你本身的行为序列（即约会-->叮嘱“女朋友回家给你打电话”-->回家-->看电视（等女朋友回电））构成一个函数，这里就调用了回调函数（叮嘱“女朋友回家给你打电话”）。
为什么使用回调函数（把“女朋友回家给你打电话”这个函数作为参数传进来）而不是把“女朋友回家给你打电话”做为一个普通函数直接调用？如果你想象一下：我想谁都不会约会完了之后，你傻等着女朋友打电话告诉你她已经回家，然后，你再回家看电视（直接调用的效果）；最好的办法就是：约会完了之后，你告诉“女朋友回家给你打电话”，然后你继续走在回家的路上，然后到家看电视等女朋友回电（回调的方法）。
本质区别就是：直接调用时，后续的执行过程必须等调用的函数执行完毕才能执行。回调时，回调函数的执行和调用函数本身的执行是异步的。

[8楼]楼主      _luxiao删除 回复
2015-03-18 18:31:50
回复 guan8080:[7楼]

我理解下来，你的意思是回调函数的作用是为了做到异步执行？，也就是说使用了回调函数，则主函数和回调函数的执行是异步的？而主函数和回调函数顺序执行就是直接调用？就像a(b){b();};和 a();c();b();c();的区别？但是我不是这样理解回调函数的，我认为回调函数只是让主函数在某个时间点调用的函数。就好比，给一个函数留一个口信，这个函数在适当的时候执行这个口信就是了。至于主函数和回调函数是异步同步，感觉不到啊。我认为异步同步更多的是指给人的主观感受。而不是程序真正的同步异步，毕竟使用了回调函数以后，当主函数执行的时候，回调函数是作为一部分存在于主函数的，这一个函数能有啥同步跟异步。再举个例子a(b, c){c();b();c();};和 a();c();b();c();，你可以说在第一种情况里b, c的运行时混乱的，异步？而在第二个情况里是直接调用？怎么感觉还是混乱的？但是这个异步情况已经跟你解释的异步是不大一样了，至少感觉只是主函数对多个回调函数进行混乱调用。给人错觉是多个回调函数在异步执行。这可能才是你真正想表达的异步执行的感觉。
而我当时写博客的时候对回调的函数理解还没达到这个层次，请听我慢慢解释，先说我博客里举的例子：
    由于我跟女朋友是两个行为体，可以假设为计算机里的两个并发执行的进程。我举的例子是女朋友那个进程里，原始程序实现的行为序列可能是：约会->回家（默认回调函数：我爱干嘛就干嘛，比如说抠脚丫）->洗澡，现在如果我告诉她要给我回电，那么序列变为，约会->回家（回电）->洗澡。从程序的角度来讲，为了尽可能的考虑周到，以及扩展灵活的需要，会使用到回调函数的技术。否则如果没有回调函数接口，要实现回电这个操作，就需要改原始的回家的代码，在里面加上回电这个操作。但是这样做没有使用回调函数好。这个场景也符合了我之前疑惑为什么使用函数做为参数，而不是直接写死在里面。因为代码太耦合总是不好的，我们想想看。如果在回家的代码里写死一段给你打电话，那第二天她上班回家其实是没必要给你打电话的，她可能更喜欢抠脚丫。当然她愿意的话，是可以给你打的。
再说一下你举的我的进程的这个例子：
    我的进程代码实现的行为序列是：约会->回家->看电视，我现在新增了一个动作，确认女朋友到家，这个是在我给女朋友留了一句话以后要加到我的行为序列里的。你说的异步实现应该是指在我回家和看电视这段序列中不应该同步调用确认女朋友到家这个动作。在大多数情况下这样做显然不可取，因为我不知道她什么时候到家，所以我要不停的尝试，其次这样会耽搁我回家和看电视。所以除了主动打电话以外，我们还想到另外一种方式来实现：等回电。我当然也可以同步的调用等回电，比如在原地等她电话，确认以后再回家，极端情况是她没给我打电话，我只能露宿街头。这样都不好啦。所以我理解你说的同步调用跟异步调用区别应该是指不要线性的执行，而是要异步的执行，说白了就是一边回家一边等电话。
    那么代码怎么实现你上面的异步执行呢。答案应该还是回调函数，毕竟nodejs号称就是这样干的。但是我担心不大能解释清楚，我只能以熟悉的python里的gevent为例来说说怎么实现这个异步调用的吧。就跟单核cpu一样，其实最终还是同步执行，只是由于等回电这个操作在没有触发的时候是不占用时间和资源的，或者占用极少的资源和时间，给人错觉是异步执行的。可以理解为不阻塞主进程的，主进程继续执行回家和看电视，所以我可以一边回家和看电视，一边等回电。但是一旦手机响起的时候，gevent就会调用起等回电这个操作，我原来的回家的动作或者看电视的动作就得中断掉，可以理解为主进程挂起，开始执行等回电这个操作。因为给女朋友打电话一定要专注。我们可以通过假想一个场景来加深理解，我每走完一步，花0.01秒问自己一句，手机响了吗？没有，ok，继续走下一步。走完一步以后我又问自己：手机响了吗？没有，ok，再走一步。这个询问自己的动作就是在gevent里做的。gevent把所有的动作以回调函数的形式放在主进程里，然后轮询所有的动作，是否需要执行，有需要执行的就拿出来执行，当然也可以执行到一半挂起，做另外一个。由于这个速度远远超过了动作执行的速度，所以在人的感受上是感受不到主进程的线性执行动作，而只感觉到了所有的动作都在异步执行（回调函数的异步执行）。就像cpu可以在1秒内完成加减乘除4个动作，所以在人的主观感觉上就像cpu并发做了4件事，但实际上cpu还是线性的做了4个操作。因为主函数只是把所有回调函数加入了轮询队列，而不是在主函数里直接线性调用，但是最终调用的时候还是线性的。只是顺序混乱了。感觉像是异步了。那么这里就呼应了我之前女朋友的那个例子。当我把（回电话）这个函数交给她的时候，她的主进程没必要立即执行回调函数，因为她在告诉自己还没到家，到家了吗，没有，继续回家，一遍一遍轮训，而只是在适当的时候（回到家）再执行。执行的过程还是同步的。其实nodejs也只能利用到一个cpu一样。这就是因为它本质是线性执行的，只是给人感觉好像是并发。它只不过是通过使用了回调函数来模拟并发执行。
    所以针对回调函数实现异步调用的结论:function a(b){ alert('haha'); b();}，当a(b);运行的时候b并没有立即运行，因为a还要alert，不过我认为不能说a和b是异步调用的，我只能说b的执行是包含在a的执行里的，所以本质上我对回调函数的理解就是，主函数会在自身执行的某个阶段调用以参数形式传进来的子函数。该子函数就是回调函数。至于说这是异步的？我真心不敢苟同。我想象中的异步应该是两个程序并发进行。而回调函数是作为一部分存在于主函数的，可以视为就是一个函数在跑，这何谈异步呢？但是如果a有多个回调函数b,c; 其实在a里还是循环同步的调用b,c，只是可能a切换调用b，c的频率够快的时候，我们感觉b，c是在并发进行，所以说b，c是异步的？
思维比较混乱，唠叨的有点多，如有混乱之处，请多多包涵。
